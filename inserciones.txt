--inserciones
insert into programa(id, nombre, meta, presupuesto, fecha_inicio, fecha_final)
values (1, 'CREEMOS FOMENTO Y PROMOCIÓN DEL DEPORTE, ACTIVIDAD FÍSICA Y RECREACIÓN PARA LA CONSTRUCCIÓN DE LA PAZ',15000,500000000,'2022-01-30','2022-07-12'),
(2, 'CREEMOS EN BOYACA RAZA DE CAMPEONES',20000,200000000,'2022-03-03','2022-11-24'),
(3, 'GESTIÓN DEL CONOCIMIENTO',8500,77000000,'2022-03-03','2022-11-24');

insert into subprograma(id, nombre,programa)
values (11, 'CREEMOS LOGROS DEPORTIVOS PARA BOYACÁ', 1),
(12, 'CREEMOS DEPORTE SOCIAL COMUNITARIO CON INCLUSIÓN POR LA PAZ', 1),
(13, 'CREEMOS EN BOYACÁ MAS ACTIVA - H.E.V.S', 1),
(14, 'CREEMOS EN CIENCIAS APLICADAS AL DEPORTE', 1),
(21, 'CREEMOS EN FORMACIÓN Y HÁBITOS DEPORTIVOS', 2),
(22, 'CREEMOS JÓVENES POR BOYACÁ', 2),
(23, 'CREEMOS VIDA SALUDABLE POR EL RESPETO DE LA PERSONA MAYOR', 2),
(24, 'JUEGOS SUPÉRATE INTERCOLEGIADOS POR LA PAZ', 2),
(31, 'RE-CREEMOS EN BOYACÁ', 3),
(32, 'CREEMOS EN EL DESARROLLO DEL CICLISMO COMO DEPORTE INSIGNIA DEL DPTO - PDDC', 3),
(33, 'CREEMOS CENTROS DE ESTUDIOS E INVESTIGACIÓN PARA EL ALTO RENDIMIENTO DEPORTIVO', 3);

copy provincia from 'C:/psg/provincias.csv' delimiter ';' csv header;
copy municipio from 'C:/psg/municipios.csv' delimiter ';' csv header;
copy barrio_vereda from 'C:/psg/barrio_vereda.csv' delimiter ';' csv header;
copy equipo from 'C:/psg/equipos.csv' delimiter ';' csv header;
copy funcionario from 'C:/psg/funcionarios.csv' delimiter ';' csv header;
copy avances from 'C:/psg/avances.csv' delimiter ';' csv header;
copy beneficiados from 'C:/psg/beneficiados.csv' delimiter ';' csv header;

--funciones
create or replace function get_programa_personas(prog int)
returns table (mes varchar(15), cantidad bigint)
language plpgsql
as
$$
declare
   personas integer;
begin
   return query select a.mes, sum(b.cantidad_personas) as cantidad
	from (((avances a left join beneficiados b on b.avance = a.codigo)
				left join subprograma s on a.subprog = s.id) 
				left join programa p on s.programa = p.id)
	where p.id = prog
	group by p.nombre, a.mes;
end;
$$;

--consultas
--beneficiados por programa
select * from get_programa_personas(1);
select * from get_programa_personas(2);
select * from get_programa_personas(3);

--beneficiados por poiblacion
select poblacion, sum(cantidad_personas) as cantidad
from beneficiados
group by poblacion;

--mes
select a.mes, sum(b.cantidad_personas) as cantidad
from beneficiados b left join avances a on b.avance = a.codigo
group by mes;

--por edad
select genero, sum(cantidad_personas) as cantidad,
	case
		when edad > 0
			and edad <= 5 then '0-5 años'
		when edad > 5
			and edad <= 12 then '6-12 años'
		when edad > 12
			and edad <= 17 then '12-17 años'
		when edad > 17
			and edad <= 29 then '18-29 años'
		when edad > 29
			and edad <= 59 then '30-59 años'
		when edad > 59 then 'mayor de 60 años'
		when edad = null then 'mayor de 60 años'
	end rango
from beneficiados
group by rango, genero;

--provincias impactadas
select distinct p.nombre
from ((avances a inner join barrio_vereda b on a.zona = b.codigo) 
		inner join municipio m on b.municip = m.codigo)
		inner join provincia p on m.provinc = p.codigo;

--cantidad personas por provincia
select distinct p.nombre, sum(bn.cantidad_personas)
from (((avances a left join beneficiados bn on bn.avance = a.codigo)
	    left join barrio_vereda b on a.zona = b.codigo) 
		left join municipio m on b.municip = m.codigo)
		left join provincia p on m.provinc = p.codigo
group by p.nombre;

--municipios impactados
select distinct a.subprog, m.nombre
from avances a, barrio_vereda b, municipio m
where a.zona = b.codigo and b.municip = m.codigo;

--cantidad sesiones por municipio
SELECT subprog, municip,
 sum(cantidad_sesiones_mes) OVER (
 PARTITION BY mes) total
FROM avances natural join barrio_vereda;

--por deporte
SELECT distinct deporte,
 sum(cantidad_sesiones_mes) OVER (
 PARTITION BY deporte
 RANGE UNBOUNDED PRECEDING) total
FROM avances;

--todo
select genero, mes, tipo, sum(cantidad_personas),
	case
		when edad > 0
			and edad <= 5 then '0-5 años'
		when edad > 5
			and edad <= 12 then '6-12 años'
		when edad > 12
			and edad <= 17 then '12-17 años'
		when edad > 17
			and edad <= 29 then '18-29 años'
		when edad > 29
			and edad <= 59 then '30-59 años'
		when edad > 60 then 'mayor de 60 años'
	end rango
from beneficiados, avances
group by rango, mes, tipo, genero;


--roles
create role gerente;
grant select, insert, delete, update on all tables IN SCHEMA public 
to gerente;

create role lider_equipo;
grant select, insert, update on avances, beneficiados
to lider_equipo;


--triggers
create table avances_updates_log (
usuario varchar(40),
update_time timestamp with time zone,
update_log avances
);

create or replace function log_avances_update()
	returns trigger
	language 'plpgsql'
as $$
BEGIN
if new <> old THEN
	insert into avances_updates_log(usuario, update_time, update_log) values (current_user, now(), new);
	end if;
	return new;
end;
$$;

create trigger avances_updates
after update on avances
for each row
execute procedure log_avances_update();


--vistas
create view meses as
	select a.mes, sum(b.cantidad_personas)
	from beneficiados b natural join avances a
	group by mes;
